schema {
  query: Query
  mutation: Mutation
}

type Query {
  "Get office with specified id."
  office(id: Int!): Office!
  "Get all offices."
  offices: [Office!]!
}

type Mutation {
  "Add new entity of office type."
  addOffice(officeAddInput: OfficeAddInput!): OfficeOutput!
  "Edit existing office type."
  editOffice(officeEditInput: OfficeEditInput! id: Int!): OfficeOutput!
  "Delete entity of the office."
  deleteOffice(id: Int!): OfficeOutput!
}

"Represents office"
type Office {
  "Id in the database."
  id: Int!
  "Name of the office which just for human readability."
  name: String!
  "Address of the office, including city, street and street number."
  address: Address!
  "Floor of the office."
  floor: Short!
}

type OfficeOutput {
  office: Office!
}

input OfficeAddInput {
  name: String!
  address: AddressAddInput!
  floor: Short!
}

input OfficeEditInput {
  name: String
  address: AddressEditInput
  floor: Short
}

type Address {
  city: String!
  street: String!
  streetNumber: String!
}

"The `Short` scalar type represents non-fractional signed whole 16-bit numeric values. Short can represent values between -(2^15) and 2^15 - 1."
scalar Short

input AddressAddInput {
  city: String!
  street: String!
  streetNumber: String!
}

input AddressEditInput {
  city: String
  street: String
  streetNumber: String
}