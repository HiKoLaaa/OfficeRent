// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public static partial class OfficeRentClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::OfficeRent.GraphQL.State.OfficeRentClientStoreAccessor> AddOfficeRentClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::OfficeRent.GraphQL.State.OfficeRentClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OfficeRent.GraphQL.GetOfficesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OfficeRent.GraphQL.OfficeRentClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OfficeRent.GraphQL.IOfficeRentClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::OfficeRent.GraphQL.State.OfficeRentClientStoreAccessor>("OfficeRentClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("OfficeRentClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OfficeRent.GraphQL.State.OfficeEntity, global::OfficeRent.GraphQL.GetOffices_Offices_Office>, global::OfficeRent.GraphQL.State.GetOffices_Offices_OfficeFromOfficeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UuidSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::OfficeRent.GraphQL.IGetOfficesResult>, global::OfficeRent.GraphQL.State.GetOfficesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::OfficeRent.GraphQL.IGetOfficesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OfficeRent.GraphQL.IGetOfficesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OfficeRent.GraphQL.IGetOfficesResult>, global::OfficeRent.GraphQL.State.GetOfficesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::OfficeRent.GraphQL.IGetOfficesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::OfficeRent.GraphQL.IGetOfficesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OfficeRent.GraphQL.IGetOfficesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OfficeRent.GraphQL.GetOfficesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OfficeRent.GraphQL.IGetOfficesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OfficeRent.GraphQL.GetOfficesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::OfficeRent.GraphQL.State.OfficeRentClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OfficeRent.GraphQL.OfficeRentClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OfficeRent.GraphQL.IOfficeRentClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OfficeRent.GraphQL.OfficeRentClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace OfficeRent.GraphQL
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public partial class GetOfficesResult : global::System.IEquatable<GetOfficesResult>, IGetOfficesResult
    {
        public GetOfficesResult(global::System.Collections.Generic.IReadOnlyList<global::OfficeRent.GraphQL.IGetOffices_Offices> offices)
        {
            Offices = offices;
        }

        /// <summary>
        /// Get all offices.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OfficeRent.GraphQL.IGetOffices_Offices> Offices { get; }

        public virtual global::System.Boolean Equals(GetOfficesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Offices, other.Offices));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetOfficesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Offices_elm in Offices)
                {
                    hash ^= 397 * Offices_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents office
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public partial class GetOffices_Offices_Office : global::System.IEquatable<GetOffices_Offices_Office>, IGetOffices_Offices_Office
    {
        public GetOffices_Offices_Office(global::System.Int32 id, global::System.String name, global::OfficeRent.GraphQL.IGetOffices_Offices_Address address, global::System.Int16 floor)
        {
            Id = id;
            Name = name;
            Address = address;
            Floor = floor;
        }

        /// <summary>
        /// Id in the database.
        /// </summary>
        public global::System.Int32 Id { get; }

        /// <summary>
        /// Name of the office which just for human readability.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Address of the office, including city, street and street number.
        /// </summary>
        public global::OfficeRent.GraphQL.IGetOffices_Offices_Address Address { get; }

        /// <summary>
        /// Floor of the office.
        /// </summary>
        public global::System.Int16 Floor { get; }

        public virtual global::System.Boolean Equals(GetOffices_Offices_Office? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Name.Equals(other.Name) && Address.Equals(other.Address) && Floor == other.Floor;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetOffices_Offices_Office)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Address.GetHashCode();
                hash ^= 397 * Floor.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public partial class GetOffices_Offices_Address_Address : global::System.IEquatable<GetOffices_Offices_Address_Address>, IGetOffices_Offices_Address_Address
    {
        public GetOffices_Offices_Address_Address(global::System.String city, global::System.String street, global::System.String streetNumber)
        {
            City = city;
            Street = street;
            StreetNumber = streetNumber;
        }

        public global::System.String City { get; }

        public global::System.String Street { get; }

        public global::System.String StreetNumber { get; }

        public virtual global::System.Boolean Equals(GetOffices_Offices_Address_Address? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (City.Equals(other.City)) && Street.Equals(other.Street) && StreetNumber.Equals(other.StreetNumber);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetOffices_Offices_Address_Address)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * City.GetHashCode();
                hash ^= 397 * Street.GetHashCode();
                hash ^= 397 * StreetNumber.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public interface IGetOfficesResult
    {
        /// <summary>
        /// Get all offices.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::OfficeRent.GraphQL.IGetOffices_Offices> Offices { get; }
    }

    /// <summary>
    /// Represents office
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public interface IGetOffices_Offices
    {
        /// <summary>
        /// Id in the database.
        /// </summary>
        public global::System.Int32 Id { get; }

        /// <summary>
        /// Name of the office which just for human readability.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Address of the office, including city, street and street number.
        /// </summary>
        public global::OfficeRent.GraphQL.IGetOffices_Offices_Address Address { get; }

        /// <summary>
        /// Floor of the office.
        /// </summary>
        public global::System.Int16 Floor { get; }
    }

    /// <summary>
    /// Represents office
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public interface IGetOffices_Offices_Office : IGetOffices_Offices
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public interface IGetOffices_Offices_Address
    {
        public global::System.String City { get; }

        public global::System.String Street { get; }

        public global::System.String StreetNumber { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public interface IGetOffices_Offices_Address_Address : IGetOffices_Offices_Address
    {
    }

    /// <summary>
    /// Represents the operation service of the GetOffices GraphQL operation
    /// <code>
    /// query GetOffices {
    ///   offices {
    ///     __typename
    ///     id
    ///     name
    ///     address {
    ///       __typename
    ///       city
    ///       street
    ///       streetNumber
    ///     }
    ///     floor
    ///     ... on Office {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public partial class GetOfficesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetOfficesQueryDocument()
        {
        }

        public static GetOfficesQueryDocument Instance { get; } = new GetOfficesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x69, 0x74, 0x79, 0x20, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x20, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x7d, 0x20, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "74bfcf0513ae31cc409dce2dbad706d7");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetOffices GraphQL operation
    /// <code>
    /// query GetOffices {
    ///   offices {
    ///     __typename
    ///     id
    ///     name
    ///     address {
    ///       __typename
    ///       city
    ///       street
    ///       streetNumber
    ///     }
    ///     floor
    ///     ... on Office {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public partial class GetOfficesQuery : global::OfficeRent.GraphQL.IGetOfficesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetOfficesResult> _operationExecutor;
        public GetOfficesQuery(global::StrawberryShake.IOperationExecutor<IGetOfficesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetOfficesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetOfficesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetOfficesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetOfficesQueryDocument.Instance.Hash.Value, name: "GetOffices", document: GetOfficesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetOffices GraphQL operation
    /// <code>
    /// query GetOffices {
    ///   offices {
    ///     __typename
    ///     id
    ///     name
    ///     address {
    ///       __typename
    ///       city
    ///       street
    ///       streetNumber
    ///     }
    ///     floor
    ///     ... on Office {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public interface IGetOfficesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetOfficesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetOfficesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the OfficeRentClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public partial class OfficeRentClient : global::OfficeRent.GraphQL.IOfficeRentClient
    {
        private readonly global::OfficeRent.GraphQL.IGetOfficesQuery _getOffices;
        public OfficeRentClient(global::OfficeRent.GraphQL.IGetOfficesQuery getOffices)
        {
            _getOffices = getOffices ?? throw new global::System.ArgumentNullException(nameof(getOffices));
        }

        public static global::System.String ClientName => "OfficeRentClient";
        public global::OfficeRent.GraphQL.IGetOfficesQuery GetOffices => _getOffices;
    }

    /// <summary>
    /// Represents the OfficeRentClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public interface IOfficeRentClient
    {
        global::OfficeRent.GraphQL.IGetOfficesQuery GetOffices { get; }
    }
}

namespace OfficeRent.GraphQL.State
{
    ///<summary>Represents office</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public partial class OfficeEntity
    {
        public OfficeEntity(global::System.Int32 id = default !, global::System.String name = default !, global::OfficeRent.GraphQL.State.AddressData address = default !, global::System.Int16 floor = default !)
        {
            Id = id;
            Name = name;
            Address = address;
            Floor = floor;
        }

        ///<summary>Id in the database.</summary>
        public global::System.Int32 Id { get; }

        ///<summary>Name of the office which just for human readability.</summary>
        public global::System.String Name { get; }

        ///<summary>Address of the office, including city, street and street number.</summary>
        public global::OfficeRent.GraphQL.State.AddressData Address { get; }

        ///<summary>Floor of the office.</summary>
        public global::System.Int16 Floor { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public partial class GetOfficesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::OfficeRent.GraphQL.GetOfficesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::OfficeRent.GraphQL.State.OfficeEntity, GetOffices_Offices_Office> _getOffices_Offices_OfficeFromOfficeEntityMapper;
        public GetOfficesResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::OfficeRent.GraphQL.State.OfficeEntity, GetOffices_Offices_Office> getOffices_Offices_OfficeFromOfficeEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getOffices_Offices_OfficeFromOfficeEntityMapper = getOffices_Offices_OfficeFromOfficeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOffices_Offices_OfficeFromOfficeEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::OfficeRent.GraphQL.IGetOfficesResult);
        public GetOfficesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetOfficesResultInfo info)
            {
                return new GetOfficesResult(MapNonNullableIGetOffices_OfficesNonNullableArray(info.Offices, snapshot));
            }

            throw new global::System.ArgumentException("GetOfficesResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OfficeRent.GraphQL.IGetOffices_Offices> MapNonNullableIGetOffices_OfficesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var offices = new global::System.Collections.Generic.List<global::OfficeRent.GraphQL.IGetOffices_Offices>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                offices.Add(MapNonNullableIGetOffices_Offices(child, snapshot));
            }

            return offices;
        }

        private global::OfficeRent.GraphQL.IGetOffices_Offices MapNonNullableIGetOffices_Offices(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Office", global::System.StringComparison.Ordinal))
            {
                return _getOffices_Offices_OfficeFromOfficeEntityMapper.Map(snapshot.GetEntity<global::OfficeRent.GraphQL.State.OfficeEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public partial class GetOfficesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetOfficesResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> offices, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Offices = offices;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get all offices.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Offices { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetOfficesResultInfo(Offices, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public partial class GetOffices_Offices_OfficeFromOfficeEntityMapper : global::StrawberryShake.IEntityMapper<global::OfficeRent.GraphQL.State.OfficeEntity, GetOffices_Offices_Office>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetOffices_Offices_OfficeFromOfficeEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetOffices_Offices_Office Map(global::OfficeRent.GraphQL.State.OfficeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetOffices_Offices_Office(entity.Id, entity.Name, MapNonNullableIGetOffices_Offices_Address(entity.Address, snapshot), entity.Floor);
        }

        private global::OfficeRent.GraphQL.IGetOffices_Offices_Address MapNonNullableIGetOffices_Offices_Address(global::OfficeRent.GraphQL.State.AddressData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetOffices_Offices_Address returnValue = default !;
            if (data.__typename.Equals("Address", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetOffices_Offices_Address_Address(data.City ?? throw new global::System.ArgumentNullException(), data.Street ?? throw new global::System.ArgumentNullException(), data.StreetNumber ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public partial class GetOfficesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OfficeRent.GraphQL.IGetOfficesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::OfficeRent.GraphQL.IGetOfficesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int16, global::System.Int16> _shortParser;
        public GetOfficesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::OfficeRent.GraphQL.IGetOfficesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _shortParser = serializerResolver.GetLeafValueParser<global::System.Int16, global::System.Int16>("Short") ?? throw new global::System.ArgumentException("No serializer for type `Short` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetOfficesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetOfficesResult Result, GetOfficesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetOfficesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetOfficesResult, GetOfficesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> officesId = default !;
            _entityStore.Update(session =>
            {
                officesId = UpdateNonNullableIGetOffices_OfficesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "offices"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetOfficesResultInfo(officesId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetOffices_OfficesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var offices = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                offices.Add(UpdateNonNullableIGetOffices_OfficesEntity(session, child, entityIds));
            }

            return offices;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetOffices_OfficesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Office", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OfficeRent.GraphQL.State.OfficeEntity? entity))
                {
                    session.SetEntity(entityId, new global::OfficeRent.GraphQL.State.OfficeEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableIGetOffices_Offices_Address(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address")), DeserializeNonNullableInt16(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "floor"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::OfficeRent.GraphQL.State.OfficeEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableIGetOffices_Offices_Address(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address")), DeserializeNonNullableInt16(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "floor"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::OfficeRent.GraphQL.State.AddressData DeserializeNonNullableIGetOffices_Offices_Address(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Address", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OfficeRent.GraphQL.State.AddressData(typename, city: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "city")), street: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "street")), streetNumber: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "streetNumber")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int16 DeserializeNonNullableInt16(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _shortParser.Parse(obj.Value.GetInt16()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public partial class AddressData
    {
        public AddressData(global::System.String __typename, global::System.String? city = default !, global::System.String? street = default !, global::System.String? streetNumber = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            City = city;
            Street = street;
            StreetNumber = streetNumber;
        }

        public global::System.String __typename { get; }

        public global::System.String? City { get; }

        public global::System.String? Street { get; }

        public global::System.String? StreetNumber { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public partial class OfficeRentClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
            "Office" => ParseOfficeEntityId(obj, __typename), _ => throw new global::System.NotSupportedException()}

            ;
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
            "Office" => FormatOfficeEntityId(entityId), _ => throw new global::System.NotSupportedException()}

            ;
        }

        private global::StrawberryShake.EntityId ParseOfficeEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatOfficeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.7.0")]
    public partial class OfficeRentClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public OfficeRentClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories): base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
